// Code generated by protoc-gen-go-svc. DO NOT EDIT.
// source: service.proto
package client

import (
	bytes "bytes"
	context "context"
	http "net/http"

	_go "github.com/json-iterator/go"
	api "gitlab.myteksi.net/dakota/fun-with-go/api"
	klient "gitlab.myteksi.net/dakota/klient"
	errorhandling "gitlab.myteksi.net/dakota/klient/errorhandling"
	initialize "gitlab.myteksi.net/dakota/klient/initialize"
)

// FunWithGoClient makes calls to FunWithGo service.
type FunWithGoClient struct {
	machinery klient.RoundTripper
}

// MakeFunWithGoClient instantiates a new FunWithGoClient.
// Deprecated: Use NewFunWithGoClient instead
func MakeFunWithGoClient(initializer klient.Initializer) (*FunWithGoClient, error) {
	roundTripper, err := initializer.Initialize()
	if err != nil {
		return nil, err
	}
	return &FunWithGoClient{
		machinery: roundTripper,
	}, nil
}

// NewFunWithGoClient instantiates a new FunWithGoClient.
func NewFunWithGoClient(baseURL string, options ...klient.Option) (*FunWithGoClient, error) {
	initializer := initialize.New(baseURL, options...)
	roundTripper, err := initializer.Initialize()
	if err != nil {
		return nil, err
	}
	return &FunWithGoClient{
		machinery: roundTripper,
	}, nil
}

func (f *FunWithGoClient) Example(ctx context.Context, req *api.Request) (*api.Response, error) {
	reqShell := (*ExampleRequestShell)(req)
	resShell := &ExampleResponseShell{}
	clientCtx := klient.MakeContext(ctx, &exampleDescriptor)
	err := f.machinery.RoundTrip(clientCtx, reqShell, resShell)
	return (*api.Response)(resShell), err
}

// ExampleRequestShell is a wrapper to make the object a klient.Request
type ExampleRequestShell api.Request

// EncodeHTTPRequest encodes the request object into a *http.Request.
func (e *ExampleRequestShell) EncodeHTTPRequest(baseURL string) (*http.Request, error) {
	filledPath := "/api/v1/example"
	fullURL := baseURL + filledPath

	jsonBytes, err := _go.Marshal(e)
	if err != nil {
		return nil, err
	}
	body := bytes.NewBuffer(jsonBytes)

	req, err := http.NewRequest("POST", fullURL, body)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Content-Type", "application/json")
	return req, nil
}

// ExampleResponseShell is a wrapper to make the object a klient.Request
type ExampleResponseShell api.Response

// DecodeHTTPResponse decodes a *http.Response into the response object.
func (e *ExampleResponseShell) DecodeHTTPResponse(res *http.Response) error {
	if res.StatusCode >= 400 {
		return errorhandling.UnmarshalError(res)
	}

	return _go.NewDecoder(res.Body).Decode(e)
}

var exampleDescriptor = klient.EndpointDescriptor{
	Name:        "Example",
	Description: "",
	Method:      "POST",
	Path:        "/api/v1/example",
}
