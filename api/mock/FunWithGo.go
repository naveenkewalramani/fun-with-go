// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "gitlab.myteksi.net/dakota/fun-with-go/api"

	mock "github.com/stretchr/testify/mock"
)

// FunWithGo is an autogenerated mock type for the FunWithGo type
type FunWithGo struct {
	mock.Mock
}

// Example provides a mock function with given fields: ctx, req
func (_m *FunWithGo) Example(ctx context.Context, req *api.Request) (*api.Response, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.Request) (*api.Response, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.Request) *api.Response); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFunWithGo interface {
	mock.TestingT
	Cleanup(func())
}

// NewFunWithGo creates a new instance of FunWithGo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFunWithGo(t mockConstructorTestingTNewFunWithGo) *FunWithGo {
	mock := &FunWithGo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
